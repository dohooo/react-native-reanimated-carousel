<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="141" failures="0" errors="0" time="25.496">
  <testsuite name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:47:46" time="23.993" tests="18">
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `data` prop: should render correctly" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `data` prop: should render correctly" time="0.016">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `renderItem` prop: should render items correctly" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `renderItem` prop: should render items correctly" time="0.006">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected should swipe to the left" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected should swipe to the left" time="2.506">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `loop` prop: should swipe back to the first item when loop is true" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `loop` prop: should swipe back to the first item when loop is true" time="2.521">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `onSnapToItem` prop: should call the onSnapToItem callback" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `onSnapToItem` prop: should call the onSnapToItem callback" time="1.857">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `autoPlay` prop: should swipe automatically when autoPlay is true" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `autoPlay` prop: should swipe automatically when autoPlay is true" time="3.242">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `autoPlayReverse` prop: should swipe automatically in reverse when autoPlayReverse is true" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `autoPlayReverse` prop: should swipe automatically in reverse when autoPlayReverse is true" time="6.045">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `defaultIndex` prop: should render the correct item with the defaultIndex props" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `defaultIndex` prop: should render the correct item with the defaultIndex props" time="0.03">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `defaultScrollOffsetValue` prop: should render the correct progress value with the defaultScrollOffsetValue props" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `defaultScrollOffsetValue` prop: should render the correct progress value with the defaultScrollOffsetValue props" time="0.009">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `ref` prop: should handle the ref props" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `ref` prop: should handle the ref props" time="0.006">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `autoFillData` prop: should auto fill data array to allow loop playback when the loop props is true" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `autoFillData` prop: should auto fill data array to allow loop playback when the loop props is true" time="0.011">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `pagingEnabled` prop: should swipe to the next item when pagingEnabled is true" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `pagingEnabled` prop: should swipe to the next item when pagingEnabled is true" time="0.627">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `onConfigurePanGesture` prop: should call the onConfigurePanGesture callback" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `onConfigurePanGesture` prop: should call the onConfigurePanGesture callback" time="0.017">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `onScrollStart` prop: should call the onScrollStart callback" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `onScrollStart` prop: should call the onScrollStart callback" time="0.009">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `onScrollEnd` prop: should call the onScrollEnd callback" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `onScrollEnd` prop: should call the onScrollEnd callback" time="0.623">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `onProgressChange` prop: should call the onProgressChange callback" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `onProgressChange` prop: should call the onProgressChange callback" time="0.634">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `fixedDirection` prop: should swipe to the correct direction when fixedDirection is positive" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `fixedDirection` prop: should swipe to the correct direction when fixedDirection is positive" time="1.27">
    </testcase>
    <testcase classname="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `overscrollEnabled` prop: should respect overscrollEnabled=false and prevent scrolling beyond bounds" name="Test the real swipe behavior of Carousel to ensure it&apos;s working as expected `overscrollEnabled` prop: should respect overscrollEnabled=false and prevent scrolling beyond bounds" time="4.054">
    </testcase>
  </testsuite>
  <testsuite name="Using RNGH v2 gesture API" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:10" time="0.19" tests="16">
    <testcase classname="Using RNGH v2 gesture API sends events to handlers" name="Using RNGH v2 gesture API sends events to handlers" time="0.002">
    </testcase>
    <testcase classname="Using RNGH v2 gesture API sends events with additional data to handlers" name="Using RNGH v2 gesture API sends events with additional data to handlers" time="0.003">
    </testcase>
    <testcase classname="Using RNGH v2 gesture API does not include console.error in the output" name="Using RNGH v2 gesture API does not include console.error in the output" time="0.002">
    </testcase>
    <testcase classname="Event list validation throws error when oldState doesn&apos;t correspond to previous event&apos;s state" name="Event list validation throws error when oldState doesn&apos;t correspond to previous event&apos;s state" time="0.016">
    </testcase>
    <testcase classname="Event list validation correctly handles events ending with state 5" name="Event list validation correctly handles events ending with state 5" time="0.001">
    </testcase>
    <testcase classname="Event list validation correctly handles events ending with state 1" name="Event list validation correctly handles events ending with state 1" time="0.001">
    </testcase>
    <testcase classname="Event list validation correctly handles events ending with state 3" name="Event list validation correctly handles events ending with state 3" time="0">
    </testcase>
    <testcase classname="Filling event list with defaults fills oldState if not passed" name="Filling event list with defaults fills oldState if not passed" time="0.001">
    </testcase>
    <testcase classname="Filling event list with defaults fills missing ACTIVE states" name="Filling event list with defaults fills missing ACTIVE states" time="0.001">
    </testcase>
    <testcase classname="Filling event list with defaults fills BEGIN and END events for discrete handlers" name="Filling event list with defaults fills BEGIN and END events for discrete handlers" time="0.001">
    </testcase>
    <testcase classname="Filling event list with defaults with FAILED event, fills BEGIN event for discrete handlers" name="Filling event list with defaults with FAILED event, fills BEGIN event for discrete handlers" time="0">
    </testcase>
    <testcase classname="Filling event list with defaults uses event data from first event in filled BEGIN, ACTIVE events" name="Filling event list with defaults uses event data from first event in filled BEGIN, ACTIVE events" time="0.001">
    </testcase>
    <testcase classname="Filling event list with defaults uses event data from last event in filled END events" name="Filling event list with defaults uses event data from last event in filled END events" time="0">
    </testcase>
    <testcase classname="Filling event list with defaults uses event data filled events" name="Filling event list with defaults uses event data filled events" time="0">
    </testcase>
    <testcase classname="Filling event list with defaults fills BEGIN and END events when they&apos;re not present, for discrete handlers" name="Filling event list with defaults fills BEGIN and END events when they&apos;re not present, for discrete handlers" time="0.001">
    </testcase>
    <testcase classname="Filling event list with defaults fills BEGIN, ACTIVE and END events when they&apos;re not present, for continuous handlers" name="Filling event list with defaults fills BEGIN, ACTIVE and END events when they&apos;re not present, for continuous handlers" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useCommonVariables" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:10" time="0.068" tests="1">
    <testcase classname="useCommonVariables should return the correct values" name="useCommonVariables should return the correct values" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useVisibleRanges" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:10" time="0.072" tests="3">
    <testcase classname="useVisibleRanges should only display the front of the list when loop is false" name="useVisibleRanges should only display the front of the list when loop is false" time="0.001">
    </testcase>
    <testcase classname="useVisibleRanges should display the rear of the list and the front of the list when loop is true" name="useVisibleRanges should display the rear of the list and the front of the list when loop is true" time="0">
    </testcase>
    <testcase classname="useVisibleRanges should shows the increased range of the list when the loop is false and swiped the carousel." name="useVisibleRanges should shows the increased range of the list when the loop is false and swiped the carousel." time="0">
    </testcase>
  </testsuite>
  <testsuite name="useCheckMounted" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.052" tests="4">
    <testcase classname="useCheckMounted should be mounted after initialization" name="useCheckMounted should be mounted after initialization" time="0">
    </testcase>
    <testcase classname="useCheckMounted should be unmounted after cleanup" name="useCheckMounted should be unmounted after cleanup" time="0.001">
    </testcase>
    <testcase classname="useCheckMounted should maintain mounted state during component lifecycle" name="useCheckMounted should maintain mounted state during component lifecycle" time="0">
    </testcase>
    <testcase classname="useCheckMounted should handle multiple mount/unmount cycles" name="useCheckMounted should handle multiple mount/unmount cycles" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useAutoPlay" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.053" tests="7">
    <testcase classname="useAutoPlay should start autoplay when autoPlay is true" name="useAutoPlay should start autoplay when autoPlay is true" time="0.001">
    </testcase>
    <testcase classname="useAutoPlay should not start autoplay when autoPlay is false" name="useAutoPlay should not start autoplay when autoPlay is false" time="0">
    </testcase>
    <testcase classname="useAutoPlay should play in reverse when autoPlayReverse is true" name="useAutoPlay should play in reverse when autoPlayReverse is true" time="0">
    </testcase>
    <testcase classname="useAutoPlay should clear timer on unmount" name="useAutoPlay should clear timer on unmount" time="0">
    </testcase>
    <testcase classname="useAutoPlay should pause and resume autoplay" name="useAutoPlay should pause and resume autoplay" time="0.001">
    </testcase>
    <testcase classname="useAutoPlay should respect autoPlayInterval timing" name="useAutoPlay should respect autoPlayInterval timing" time="0">
    </testcase>
    <testcase classname="useAutoPlay should chain autoplay calls correctly" name="useAutoPlay should chain autoplay calls correctly" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useOnProgressChange" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.051" tests="7">
    <testcase classname="useOnProgressChange should handle progress change with function callback" name="useOnProgressChange should handle progress change with function callback" time="0.001">
    </testcase>
    <testcase classname="useOnProgressChange should handle progress change with shared value" name="useOnProgressChange should handle progress change with shared value" time="0">
    </testcase>
    <testcase classname="useOnProgressChange should handle loop mode" name="useOnProgressChange should handle loop mode" time="0">
    </testcase>
    <testcase classname="useOnProgressChange should handle autoFillData mode" name="useOnProgressChange should handle autoFillData mode" time="0.001">
    </testcase>
    <testcase classname="useOnProgressChange should clamp values when not in loop mode" name="useOnProgressChange should clamp values when not in loop mode" time="0">
    </testcase>
    <testcase classname="useOnProgressChange should handle positive offset values" name="useOnProgressChange should handle positive offset values" time="0">
    </testcase>
    <testcase classname="useOnProgressChange should not call onProgressChange if not provided" name="useOnProgressChange should not call onProgressChange if not provided" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useCarouselController" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.056" tests="16">
    <testcase classname="useCarouselController should initialize with default index" name="useCarouselController should initialize with default index" time="0">
    </testcase>
    <testcase classname="useCarouselController should move to next slide" name="useCarouselController should move to next slide" time="0.001">
    </testcase>
    <testcase classname="useCarouselController should move to previous slide" name="useCarouselController should move to previous slide" time="0">
    </testcase>
    <testcase classname="useCarouselController should handle loop behavior correctly" name="useCarouselController should handle loop behavior correctly" time="0.002">
    </testcase>
    <testcase classname="useCarouselController should prevent movement when loop is disabled and at bounds" name="useCarouselController should prevent movement when loop is disabled and at bounds" time="0">
    </testcase>
    <testcase classname="useCarouselController should scroll to specific index" name="useCarouselController should scroll to specific index" time="0">
    </testcase>
    <testcase classname="useCarouselController should handle animation callbacks" name="useCarouselController should handle animation callbacks" time="0">
    </testcase>
    <testcase classname="useCarouselController should respect animation duration" name="useCarouselController should respect animation duration" time="0">
    </testcase>
    <testcase classname="useCarouselController should handle non-animated transitions" name="useCarouselController should handle non-animated transitions" time="0.001">
    </testcase>
    <testcase classname="useCarouselController should handle multiple slide movements" name="useCarouselController should handle multiple slide movements" time="0">
    </testcase>
    <testcase classname="useCarouselController should handle animated reactions correctly" name="useCarouselController should handle animated reactions correctly" time="0">
    </testcase>
    <testcase classname="useCarouselController should handle runOnJS correctly" name="useCarouselController should handle runOnJS correctly" time="0">
    </testcase>
    <testcase classname="useCarouselController imperative handle should maintain correct index through imperative calls" name="useCarouselController imperative handle should maintain correct index through imperative calls" time="0.001">
    </testcase>
    <testcase classname="useCarouselController imperative handle should handle animation callbacks through imperative calls" name="useCarouselController imperative handle should handle animation callbacks through imperative calls" time="0">
    </testcase>
    <testcase classname="useCarouselController imperative handle should respect loop settings through imperative calls" name="useCarouselController imperative handle should respect loop settings through imperative calls" time="0">
    </testcase>
    <testcase classname="useCarouselController imperative handle should handle multiple slide movements through imperative calls" name="useCarouselController imperative handle should handle multiple slide movements through imperative calls" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useLayoutConfig" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.053" tests="8">
    <testcase classname="useLayoutConfig should return normal layout by default" name="useLayoutConfig should return normal layout by default" time="0.001">
    </testcase>
    <testcase classname="useLayoutConfig should handle parallax mode" name="useLayoutConfig should handle parallax mode" time="0">
    </testcase>
    <testcase classname="useLayoutConfig should handle horizontal-stack mode" name="useLayoutConfig should handle horizontal-stack mode" time="0.002">
    </testcase>
    <testcase classname="useLayoutConfig should handle vertical-stack mode" name="useLayoutConfig should handle vertical-stack mode" time="0">
    </testcase>
    <testcase classname="useLayoutConfig should handle vertical orientation" name="useLayoutConfig should handle vertical orientation" time="0">
    </testcase>
    <testcase classname="useLayoutConfig should handle different offsets" name="useLayoutConfig should handle different offsets" time="0">
    </testcase>
    <testcase classname="useLayoutConfig should memoize layout function" name="useLayoutConfig should memoize layout function" time="0.001">
    </testcase>
    <testcase classname="useLayoutConfig should update layout when props change" name="useLayoutConfig should update layout when props change" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useInitProps" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.05" tests="7">
    <testcase classname="useInitProps should initialize with default values" name="useInitProps should initialize with default values" time="0.001">
    </testcase>
    <testcase classname="useInitProps should handle custom values" name="useInitProps should handle custom values" time="0">
    </testcase>
    <testcase classname="useInitProps should handle stack mode configuration" name="useInitProps should handle stack mode configuration" time="0">
    </testcase>
    <testcase classname="useInitProps should handle empty data array" name="useInitProps should handle empty data array" time="0.001">
    </testcase>
    <testcase classname="useInitProps should round width and height values" name="useInitProps should round width and height values" time="0">
    </testcase>
    <testcase classname="useInitProps should handle enableSnap property" name="useInitProps should handle enableSnap property" time="0">
    </testcase>
    <testcase classname="useInitProps should handle vertical-stack mode" name="useInitProps should handle vertical-stack mode" time="0">
    </testcase>
  </testsuite>
  <testsuite name="computeOffsetIfSizeChanged" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.046" tests="5">
    <testcase classname="computeOffsetIfSizeChanged [CASE 1] should return the correct values when size does not change" name="computeOffsetIfSizeChanged [CASE 1] should return the correct values when size does not change" time="0">
    </testcase>
    <testcase classname="computeOffsetIfSizeChanged [CASE 2] should return the correct values when size changes from 500 to 400" name="computeOffsetIfSizeChanged [CASE 2] should return the correct values when size changes from 500 to 400" time="0">
    </testcase>
    <testcase classname="computeOffsetIfSizeChanged [CASE 3] should return the correct values when size changes from 500 to 499" name="computeOffsetIfSizeChanged [CASE 3] should return the correct values when size changes from 500 to 499" time="0">
    </testcase>
    <testcase classname="computeOffsetIfSizeChanged [CASE 4] should return the correct values when size changes from 500 to 501" name="computeOffsetIfSizeChanged [CASE 4] should return the correct values when size changes from 500 to 501" time="0">
    </testcase>
    <testcase classname="computeOffsetIfSizeChanged [CASE 5] should return the correct values when size changes from 224 to 524" name="computeOffsetIfSizeChanged [CASE 5] should return the correct values when size changes from 224 to 524" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="handlerOffsetDirection" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.052" tests="5">
    <testcase classname="handlerOffsetDirection should return -1 when default value equals to zero" name="handlerOffsetDirection should return -1 when default value equals to zero" time="0.001">
    </testcase>
    <testcase classname="handlerOffsetDirection should return 1 when default value is greater than zero" name="handlerOffsetDirection should return 1 when default value is greater than zero" time="0">
    </testcase>
    <testcase classname="handlerOffsetDirection should return -1 when default value is less than zero" name="handlerOffsetDirection should return -1 when default value is less than zero" time="0">
    </testcase>
    <testcase classname="handlerOffsetDirection should return 1 when default value equals to zero and fixedDirection is negative" name="handlerOffsetDirection should return 1 when default value equals to zero and fixedDirection is negative" time="0">
    </testcase>
    <testcase classname="handlerOffsetDirection should return -1 when default value is greater than zero and fixedDirection is negative" name="handlerOffsetDirection should return -1 when default value is greater than zero and fixedDirection is negative" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useUpdateGestureConfig" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.056" tests="6">
    <testcase classname="useUpdateGestureConfig should update gesture enabled state" name="useUpdateGestureConfig should update gesture enabled state" time="0.001">
    </testcase>
    <testcase classname="useUpdateGestureConfig should handle undefined enabled state" name="useUpdateGestureConfig should handle undefined enabled state" time="0">
    </testcase>
    <testcase classname="useUpdateGestureConfig should update when enabled state changes" name="useUpdateGestureConfig should update when enabled state changes" time="0">
    </testcase>
    <testcase classname="useUpdateGestureConfig should not update when enabled state remains the same" name="useUpdateGestureConfig should not update when enabled state remains the same" time="0">
    </testcase>
    <testcase classname="useUpdateGestureConfig should handle gesture object changes" name="useUpdateGestureConfig should handle gesture object changes" time="0.001">
    </testcase>
    <testcase classname="useUpdateGestureConfig should cleanup properly on unmount" name="useUpdateGestureConfig should cleanup properly on unmount" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useSharedValue" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.058" tests="1">
    <testcase classname="useSharedValue should return the correct values" name="useSharedValue should return the correct values" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="log utilities" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.05" tests="8">
    <testcase classname="log utilities log should call console.log with provided arguments" name="log utilities log should call console.log with provided arguments" time="0">
    </testcase>
    <testcase classname="log utilities log should handle single argument" name="log utilities log should handle single argument" time="0">
    </testcase>
    <testcase classname="log utilities log should handle multiple arguments" name="log utilities log should handle multiple arguments" time="0">
    </testcase>
    <testcase classname="log utilities round should round positive numbers correctly" name="log utilities round should round positive numbers correctly" time="0">
    </testcase>
    <testcase classname="log utilities round should round negative numbers correctly" name="log utilities round should round negative numbers correctly" time="0">
    </testcase>
    <testcase classname="log utilities round should handle zero values" name="log utilities round should handle zero values" time="0">
    </testcase>
    <testcase classname="log utilities round should handle integers" name="log utilities round should handle integers" time="0">
    </testcase>
    <testcase classname="log utilities round should handle decimal places" name="log utilities round should handle decimal places" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useSharedValue" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.051" tests="1">
    <testcase classname="useSharedValue retains value on rerender" name="useSharedValue retains value on rerender" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="computed-with-auto-fill-data utilities" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.05" tests="16">
    <testcase classname="computed-with-auto-fill-data utilities computedFillDataWithAutoFillData should handle single item" name="computed-with-auto-fill-data utilities computedFillDataWithAutoFillData should handle single item" time="0">
    </testcase>
    <testcase classname="computed-with-auto-fill-data utilities computedFillDataWithAutoFillData should handle double items" name="computed-with-auto-fill-data utilities computedFillDataWithAutoFillData should handle double items" time="0">
    </testcase>
    <testcase classname="computed-with-auto-fill-data utilities computedFillDataWithAutoFillData should return original data when autoFillData is false" name="computed-with-auto-fill-data utilities computedFillDataWithAutoFillData should return original data when autoFillData is false" time="0">
    </testcase>
    <testcase classname="computed-with-auto-fill-data utilities computedFillDataWithAutoFillData should return original data when loop is false" name="computed-with-auto-fill-data utilities computedFillDataWithAutoFillData should return original data when loop is false" time="0">
    </testcase>
    <testcase classname="computed-with-auto-fill-data utilities computedOffsetXValueWithAutoFillData should handle single item" name="computed-with-auto-fill-data utilities computedOffsetXValueWithAutoFillData should handle single item" time="0">
    </testcase>
    <testcase classname="computed-with-auto-fill-data utilities computedOffsetXValueWithAutoFillData should handle double items" name="computed-with-auto-fill-data utilities computedOffsetXValueWithAutoFillData should handle double items" time="0">
    </testcase>
    <testcase classname="computed-with-auto-fill-data utilities computedOffsetXValueWithAutoFillData should return original value when autoFillData is false" name="computed-with-auto-fill-data utilities computedOffsetXValueWithAutoFillData should return original value when autoFillData is false" time="0">
    </testcase>
    <testcase classname="computed-with-auto-fill-data utilities computedOffsetXValueWithAutoFillData should return original value when loop is false" name="computed-with-auto-fill-data utilities computedOffsetXValueWithAutoFillData should return original value when loop is false" time="0">
    </testcase>
    <testcase classname="computed-with-auto-fill-data utilities computedRealIndexWithAutoFillData should handle single item" name="computed-with-auto-fill-data utilities computedRealIndexWithAutoFillData should handle single item" time="0">
    </testcase>
    <testcase classname="computed-with-auto-fill-data utilities computedRealIndexWithAutoFillData should handle double items" name="computed-with-auto-fill-data utilities computedRealIndexWithAutoFillData should handle double items" time="0">
    </testcase>
    <testcase classname="computed-with-auto-fill-data utilities computedRealIndexWithAutoFillData should return original index when autoFillData is false" name="computed-with-auto-fill-data utilities computedRealIndexWithAutoFillData should return original index when autoFillData is false" time="0">
    </testcase>
    <testcase classname="computed-with-auto-fill-data utilities computedRealIndexWithAutoFillData should return original index when loop is false" name="computed-with-auto-fill-data utilities computedRealIndexWithAutoFillData should return original index when loop is false" time="0">
    </testcase>
    <testcase classname="computed-with-auto-fill-data utilities convertToSharedIndex should handle single item" name="computed-with-auto-fill-data utilities convertToSharedIndex should handle single item" time="0">
    </testcase>
    <testcase classname="computed-with-auto-fill-data utilities convertToSharedIndex should handle double items" name="computed-with-auto-fill-data utilities convertToSharedIndex should handle double items" time="0">
    </testcase>
    <testcase classname="computed-with-auto-fill-data utilities convertToSharedIndex should return original index when autoFillData is false" name="computed-with-auto-fill-data utilities convertToSharedIndex should return original index when autoFillData is false" time="0">
    </testcase>
    <testcase classname="computed-with-auto-fill-data utilities convertToSharedIndex should return original index when loop is false" name="computed-with-auto-fill-data utilities convertToSharedIndex should return original index when loop is false" time="0">
    </testcase>
  </testsuite>
  <testsuite name="should work as expected" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.049" tests="5">
    <testcase classname="should work as expected The direction is negative, And changing length of data set from 4 to 3, the new index will to be 2." name="should work as expected The direction is negative, And changing length of data set from 4 to 3, the new index will to be 2." time="0">
    </testcase>
    <testcase classname="should work as expected The direction is negative, Changing length of data set from 4 to 3, the index remains original." name="should work as expected The direction is negative, Changing length of data set from 4 to 3, the index remains original." time="0">
    </testcase>
    <testcase classname="should work as expected The direction is positive, Changing length of data set from 4 to 5, the index remains original." name="should work as expected The direction is positive, Changing length of data set from 4 to 5, the index remains original." time="0">
    </testcase>
    <testcase classname="should work as expected The direction is negative, Changing length of data set from 4 to 5, the index remains original." name="should work as expected The direction is negative, Changing length of data set from 4 to 5, the index remains original." time="0">
    </testcase>
    <testcase classname="should work as expected Changing length of data set from 0 to 3, the index remains original." name="should work as expected Changing length of data set from 0 to 3, the index remains original." time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="dealWithAnimation" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.048" tests="4">
    <testcase classname="dealWithAnimation should handle spring animation" name="dealWithAnimation should handle spring animation" time="0.002">
    </testcase>
    <testcase classname="dealWithAnimation should handle timing animation" name="dealWithAnimation should handle timing animation" time="0">
    </testcase>
    <testcase classname="dealWithAnimation should pass animation config correctly" name="dealWithAnimation should pass animation config correctly" time="0">
    </testcase>
    <testcase classname="dealWithAnimation should handle animation completion" name="dealWithAnimation should handle animation completion" time="0">
    </testcase>
  </testsuite>
  <testsuite name="horizontalStackLayout" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.048" tests="1">
    <testcase classname="horizontalStackLayout should make the rotateZDeg works properly when it is passed in horizontal-stack mode through modeConfig" name="horizontalStackLayout should make the rotateZDeg works properly when it is passed in horizontal-stack mode through modeConfig" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="computeOffsetIfDataChanged" errors="0" failures="0" skipped="0" timestamp="2024-11-25T09:48:11" time="0.057" tests="2">
    <testcase classname="computeOffsetIfDataChanged should return the correct values, if index is 0" name="computeOffsetIfDataChanged should return the correct values, if index is 0" time="0">
    </testcase>
    <testcase classname="computeOffsetIfDataChanged should return the correct values, if index is 1" name="computeOffsetIfDataChanged should return the correct values, if index is 1" time="0.001">
    </testcase>
  </testsuite>
</testsuites>